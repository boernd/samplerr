; -*- mode: clojure; -*-
; vim: filetype=clojure

;(logging/init {:file "/var/log/riemann/riemann.log"})
;(logging/init {:files [{:path "/var/log/riemann/riemann.log" :layout :riemann}] :logsize-rotate 100})
(load-plugins)
(repl-server {:host "127.0.0.1" :port 1234})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host :port 8086})
  (udp-server {:host host :port 8086})
  (ws-server {:host host :port 8087})
)

(periodically-expire 30)
;
; lein run /path/to/this/file
; lein repl :connect 1234
; (require '[riemann.plugin.samplerr :as samplerr] :reload-all)
; ((samplerr/archive {:rra [{:step 5 :keep 86400} {:step 6 :keep 12}]}) {:foo "bar" :metric 1})
; or java -cp /usr/lib/riemann/riemann.jar:/data/fwernli/git/samplerr/target/samplerr-0.1.0-SNAPSHOT-standalone.jar riemann.bin /home/fwernli/projects/sampler/riemann/tests.config

(require '[riemann.plugin.samplerr :as samplerr])
(let [elastic (samplerr/connect "http://localhost:9200")
      index (index)
      cfunc [{:name "avg" :func folds/mean}
             {:name "min" :func folds/minimum}
             {:name "max" :func folds/maximum}]
      update (batch 1000 10 (samplerr/es-index {:es_type "samplerr" :es_conn elastic}))
      rra {:rra [{:step 10 :es_index "'samplerr-'YYYY.MM.dd" :es_type "samplerr" :es_conn elastic :cfunc cfunc}
                                      {:step 60 :es_index "'samplerr-'YYYY.MM" :es_type "samplerr" :cfunc cfunc}
                                      {:step 600 :es_index "'samplerr-'YYYY" :es_type "samplerr" :cfunc cfunc}]}]
  (streams
    (by [:host :service]
      (samplerr/archive rra update))))

